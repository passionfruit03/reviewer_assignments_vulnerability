import os
import logging
import json
import openai

class Prompt:
    def __init__(self, prompt_dir, system_prompt_file):
        try:
            system_prompt_file = os.path.join(prompt_dir, system_prompt_file)
            with open(system_prompt_file, 'r') as f:
                self.system_prompt = f.read()
        except FileNotFoundError as e:
            logging.error(f"File {system_prompt_file} not found")
            raise e

        # Load examples for few-shot in-context learning
        self.examples = []
        try:
            examples_dir = os.path.join(prompt_dir, "few_shot_examples")
        except FileNotFoundError:
            raise FileNotFoundError("Make sure to have a folder 'prompts/few_shot_examples' with examples")
        for example in os.listdir(examples_dir):
            try:
                with open(f"{os.path.join(examples_dir, example)}/user.json", 'r') as f:
                    user = json.load(f)
                with open(f"{os.path.join(examples_dir, example)}/assistant.json", 'r') as f:
                    assistant = json.load(f)
            except FileNotFoundError:
                raise FileNotFoundError(f"Make sure to have user.json and assistant.json in '{os.path.join(examples_dir, example)}'")
            self.examples.append({"role": "user", "content": json.dumps(user)})
            self.examples.append({"role": "assistant", "content": json.dumps(assistant)})


def get_response(prompt: Prompt, user_input_dict, gpt_model, max_tokens=3000):
    try:
        # configure the messages
        messages=[{"role": "system", "content": prompt.system_prompt}]
        messages.extend(prompt.examples)
        messages.append({"role": "user", "content": json.dumps(user_input_dict)})

        # send the input to the API
        response = openai.ChatCompletion.create(
            model=gpt_model,
            messages=messages,
            response_format={ "type": "json_object" },
            max_tokens=max_tokens,
        )
        logging.debug(response)
        choices = response['choices']
    except openai.error.Timeout:
        logging.warning("Timeout error")
        return None
    except openai.error.APIError: 
        logging.warning("API error")
        return None
    except openai.error.ServiceUnavailableError:
        logging.warning("Service unavailable")
        return None
    except KeyError:
        logging.warning("GPT4 response does not contain 'choices'")
        return None

    try:
        edit = json.loads(choices[0]['message']['content'])
    except IndexError:
        logging.warning("GPT4 response is empty")
        return None
    except json.JSONDecodeError:
        logging.warning("GPT4 response is not a valid JSON")
        return None

    return edit