import random
import time
import json
from typing import List
import logging

import shared
import gpt_helpers
from paper import Paper, Content
from target_reviewer import TargetReviewer

def include_themes_gpt(paper: Paper, target_reviewer: TargetReviewer):
    user_input_dict = {
        "title": paper.content.title,
        "abstract": paper.content.abstract,
        "related previous works": [
            {
                "title": p.content.title,
                "abstract": p.content.abstract
            } for p in target_reviewer.archive
        ]
    }
    response = gpt_helpers.get_response(shared.prompts["include_themes"], user_input_dict, shared.gpt_model)
    try:
        modified_paper = paper.paper_with_modified_abstract(response["abstract"])
    except:
        logging.warning(f"Error in include_themes (auto): {response}")
        return paper
    return modified_paper
    

def include_themes(paper: Paper, target_reviewer: TargetReviewer):
    # Include themes from the paper in the target reviewer's archive
    generated_paper = include_themes_gpt(paper, target_reviewer)
    if shared.attack_mode == "auto":
        return generated_paper
    else:
        user_input_dict = {
            "title": paper.content.title,
            "abstract": generated_paper.content.abstract,
            "target_reviewer_id": target_reviewer.id,
            "related previous works": [
                p.content.title for p in target_reviewer.archive
            ],
            "top_indices": target_reviewer.top_indices,
            "authors": paper.authors,
        }
        while True:
            with open("input.txt", "w") as f:
                json.dump(user_input_dict, f, indent=4)
            print(f"You are targeting {target_reviewer.id}")
            input("Press enter when done")

            try: 
                with open("input.txt", "r") as f:
                    response = json.load(f)
                    modified_paper = paper.paper_with_modified_abstract(response["abstract"])

            except json.JSONDecodeError as e:
                print(e)
                print("Invalid input")
                continue

            if input("please confirm the changes (y/n)") == "y":
                break
    
    return modified_paper


def insert_keywords_gpt(paper: Paper, target_reviewer: TargetReviewer, keywords: List[str]):
    user_input_dict = {
        "title": paper.content.title,
        "abstract": paper.content.abstract,
        "keywords": keywords
    }
    response = gpt_helpers.get_response(shared.prompts["insert_keywords"], user_input_dict, shared.gpt_model)
    try:
        modified_paper = paper.paper_with_modified_abstract(response["abstract"])
        rejected_keywords = response["left out keywords"]
    except Exception as e:
        logging.warning(f"Error in insert_keywords (auto): {response}")
        return paper, {}
    return modified_paper, rejected_keywords

def insert_keywords(paper: Paper, target_reviewer: TargetReviewer, keywords: List[str]):
    # Include themes from the paper in the target reviewer's archive
    if shared.attack_mode == "auto":
        generated_paper, rejected_keywords = insert_keywords_gpt(paper, target_reviewer, keywords)
        return generated_paper, rejected_keywords
    else:
        user_input_dict = {
            "title": paper.content.title,
            "abstract": paper.content.abstract,
            "target_reviewer_id": target_reviewer.id,
            "keywords": keywords,
            "left out keywords": {},
            "top_indices": target_reviewer.top_indices,
            "authors": paper.authors,
        }
        while True:
            with open("input.txt", "w") as f:
                json.dump(user_input_dict, f, indent=4)
            print(f"You are targeting {target_reviewer.id}")
            print(f"Please add the words {keywords} to the text")
            input("Press enter when done")

            try: 
                with open("input.txt", "r") as f:
                    response = json.load(f)
                    modified_paper = paper.paper_with_modified_abstract(response["abstract"])
                    rejected_keywords = response["left out keywords"]

            except json.JSONDecodeError as e:
                print(e)
                print("Invalid input")
                continue

            if input("please confirm the changes (y/n)") == "y":
                break
    
    return modified_paper, rejected_keywords



if __name__ == "__main__":
    from gpt_helpers import Prompt
    prompt = Prompt("../prompts/toy")
    user_input_dict = {
        "lyrics": "Nice to meet you, where you been? I could show you incredible things Magic, madness, heaven, sin"
    }