from typing import Dict
from copy import copy
import shared

class Content:
    def __init__(self, title: str, abstract: str):
        self.title = title
        self.abstract = abstract

    def __str__(self):
        return f"Content(title=\"{self.title}\",\n\t\tabstract=\"{self.abstract}\")"

class Paper(object):

    def __init__(self, content: Content, embedding):
        self.content = content
        self.embedding = embedding
    
    @classmethod
    def make(cls, instance: Dict):
        content = Content(instance['title'], instance['abstract'])
        paper = shared.model.embed_content(content)
        paper.authors = instance.get('authors')
        paper.paper_id = instance.get('paper_id')
        return paper
    
    def paper_with_modified_abstract(self, new_abstract: str):
        new_instance = {
            "title": self.content.title,
            "abstract": new_abstract,
            "authors": copy(self.authors),
            "paper_id": self.paper_id
        }
        return Paper.make(new_instance)
        

    def __str__(self):
        return f"Paper(title=\"{self.content.title}\",\n\t\tabstract=\"{self.content.abstract}\")"
    
if __name__ == "__main__":
    import numpy as np
    from specter import Specter
    shared.model = Specter("v1")

    # paper = Paper(Content("title", "abstract"), np.random.rand(768))
    paper = Paper.make({"title": "title", "abstract": "abstract", "authors": ["author1", "author2"], "paper_id": "paper_id"})

    print(paper.embedding.shape)